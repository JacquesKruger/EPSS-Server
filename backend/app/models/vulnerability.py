"""
Vulnerability Data Models
"""

from sqlalchemy import Column, Integer, String, Float, DateTime, Text, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from typing import Optional

Base = declarative_base()


class Vulnerability(Base):
    """Vulnerability model"""
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True, index=True)
    cve_id = Column(String(20), unique=True, index=True, nullable=False)
    title = Column(String(500), nullable=True)
    description = Column(Text, nullable=True)
    cvss_score = Column(Float, nullable=True)
    cvss_vector = Column(String(200), nullable=True)
    cvss_severity = Column(String(20), nullable=True)
    epss_score = Column(Float, nullable=True)
    epss_percentile = Column(Float, nullable=True)
    cpr_score = Column(Float, nullable=True)
    cpr_risk_level = Column(String(20), nullable=True)
    
    # Metadata
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    last_epss_update = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    findings = relationship("VulnerabilityFinding", back_populates="vulnerability")


class VulnerabilityFinding(Base):
    """Individual vulnerability finding from scans"""
    __tablename__ = "vulnerability_findings"
    
    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"), nullable=False)
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False)
    
    # Asset Information
    ip_address = Column(String(45), nullable=False, index=True)  # IPv6 support
    hostname = Column(String(255), nullable=True)
    port = Column(Integer, nullable=True)
    protocol = Column(String(10), nullable=True)
    service = Column(String(100), nullable=True)
    
    # Finding Details
    status = Column(String(20), default="open")  # open, fixed, false_positive
    severity = Column(String(20), nullable=True)
    solution = Column(Text, nullable=True)
    references = Column(Text, nullable=True)
    
    # Risk Assessment
    asset_risk_score = Column(Float, nullable=True)
    business_impact = Column(String(50), nullable=True)
    
    # Metadata
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="findings")
    scan = relationship("Scan", back_populates="findings")


class Scan(Base):
    """Scan session model"""
    __tablename__ = "scans"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    scan_type = Column(String(50), nullable=False)  # wazuh, openvas, manual
    source_file = Column(String(500), nullable=True)
    
    # Scan Metadata
    total_findings = Column(Integer, default=0)
    unique_cves = Column(Integer, default=0)
    high_severity_count = Column(Integer, default=0)
    medium_severity_count = Column(Integer, default=0)
    low_severity_count = Column(Integer, default=0)
    
    # Status
    status = Column(String(20), default="processing")  # processing, completed, failed
    error_message = Column(Text, nullable=True)
    
    # Timestamps
    started_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    findings = relationship("VulnerabilityFinding", back_populates="scan")


class Asset(Base):
    """Asset/System model for risk assessment"""
    __tablename__ = "assets"
    
    id = Column(Integer, primary_key=True, index=True)
    ip_address = Column(String(45), unique=True, index=True, nullable=False)
    hostname = Column(String(255), nullable=True)
    
    # Asset Classification
    asset_type = Column(String(50), nullable=True)  # server, workstation, network_device
    environment = Column(String(50), nullable=True)  # production, staging, development
    business_criticality = Column(String(50), nullable=True)  # critical, high, medium, low
    
    # Risk Metrics
    total_vulnerabilities = Column(Integer, default=0)
    critical_vulnerabilities = Column(Integer, default=0)
    high_vulnerabilities = Column(Integer, default=0)
    medium_vulnerabilities = Column(Integer, default=0)
    low_vulnerabilities = Column(Integer, default=0)
    
    # Calculated Risk Scores
    asset_risk_score = Column(Float, nullable=True)
    cpr_risk_level = Column(String(20), nullable=True)
    
    # Metadata
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    last_scan = Column(DateTime(timezone=True), nullable=True)


class Report(Base):
    """Generated report model"""
    __tablename__ = "reports"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    report_type = Column(String(50), nullable=False)  # executive, technical, compliance
    format = Column(String(10), nullable=False)  # pdf, excel, csv
    
    # Report Content
    scan_ids = Column(Text, nullable=True)  # JSON array of scan IDs
    filters = Column(Text, nullable=True)  # JSON filters applied
    
    # File Information
    file_path = Column(String(500), nullable=True)
    file_size = Column(Integer, nullable=True)
    
    # Status
    status = Column(String(20), default="generating")  # generating, completed, failed
    error_message = Column(Text, nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True), nullable=True)
    expires_at = Column(DateTime(timezone=True), nullable=True)
